---
description: 
globs: 
alwaysApply: false
---
# Cursor Interaction Rules for Page Modifier Template

This file defines how Cursor guides the user to customize the Page Modifier extension.

## Initial Setup Questions

When the user asks for help with this project for the first time, Cursor should ask:

1. **What website or websites will this extension modify?**
2. **What is the name of the extension?**
3. **What is the description and purpose of the extension?**
4. **Which styles or DOM changes do you want to apply?** (e.g., colors, fonts, banners, element removal)
5. **Are there any specific user interactions you want to handle?** (e.g., clicking buttons, dismissing elements)
6. **Do you need to add any permissions, icons, or version number?**

Once the user answers these questions, Cursor should:

- Update `manifest.json` with the provided name, description, version, and permissions.
- Confirm any requested icons and ask for file paths if needed.

## Feature Management

Cursor should help users define discrete "features"â€”groups of edits that can be toggled on/off in the popup UI.

### Defining a New Feature

When the user says "Create a feature..." or "Add feature...", Cursor should ask:

1. **Feature name** (display name, e.g., "Hide Ads")
2. **Feature ID** (snake_case identifier, e.g., "hide_ads")
3. **Description** (brief UI text)

After receiving details, Cursor should:

- Append to the `features` array in `popup.js`:
  ```js
  { id: "hide_ads", name: "Hide Ads", description: "Remove ad banners", default: true },
  ```
- Add a toggle entry to `popup.html` inside `#features-container`:
  ```html
  <label>
  	<input type="checkbox" data-feature-id="hide_ads" />
  	Hide Ads
  	<p class="description">Remove ad banners</p>
  </label>
  ```
- Generate `popup.js` code to render, load, and save feature states.
- Wrap feature logic in `main.js` using:
  ```js
  chrome.storage.sync.get('hide_ads', (data) => {
  	if (data.hide_ads) {
  		// feature code here
  	}
  });
  ```

### Master Toggle

Cursor should ensure `popup.html` includes a master toggle at the top:

```html
<label>
	<input type="checkbox" id="master-toggle" />
	Enable All Features
</label>
```

and add `popup.js` logic to set or clear all features on change.

## Ongoing Customization

After the initial setup, for any user prompt like "Add X", "Remove Y", or "Change Z":

1. Determine which file to modify (`main.js`, `helpers.js`, or `manifest.json`).
2. Use `PageModifier` helper functions:
   - `injectCSS(cssString)` for style changes.
   - `addElement(selector, htmlString)` / `removeElement(selector)` for DOM changes.
   - `onElementReady(selector, callback)` / `onClick(selector, handler)` for dynamic changes.
3. Provide the updated code snippet and ask the user to confirm before applying.
4. After applying changes, remind the user how to reload the extension in their browser.

- **Adding new features**: Follow the "Defining a New Feature" flow.
- **Editing features**: Prompt Cursor to update an existing feature by ID or name.
- **Removing features**: Prompt Cursor to remove a feature by ID or name.
- Always ask for confirmation before applying file changes.

## Best Practices

- Keep changes focused and minimal.
- Prefer `PageModifier` helpers over raw DOM APIs.
- Ensure CSS strings are properly quoted and escaped.
- Comment new code for clarity.

## Reloading the Extension

After making code changes, Cursor should remind the user to reload:

- **Chrome/Edge**: Navigate to `chrome://extensions/` and click **Reload**.
- **Firefox**: Navigate to `about:debugging#/runtime/this-firefox` and click **Reload**.

After making code changes, Cursor should remind the user to reload:

- **Chrome/Edge**: Navigate to `chrome://extensions/` and click **Reload**.
- **Firefox**: Navigate to `about:debugging#/runtime/this-firefox` and click **Reload**.

